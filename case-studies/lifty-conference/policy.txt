ReviewScore {
  create: none,
  delete: none,

  novelty: I64 {
    read: none,
    write: none,
  },

  presentation: I64 {
    read: none,
    write: none,
  },

  technical: I64 {
    read: none,
    write: none,
  },

  confidence: I64 {
    read: none,
    write: none,
  },
}

Reviewer {
  create: none,
  delete: none,

  idx: I64 {
    read: none,
    write: none,
  },

  user: Id(User) {
    read: _ -> World::Find({}).flat_map(w -> w.pc),
    write: none,
  },
}

Review {
  create: none,
  delete: none,

  time: String {
    read: none,
    write: none,
  },

  contents: String {
    read: none,
    write: none,
  },

  scores: Set(Id(ReviewScore)) {
    read: none,
    write: none,
  },

  reviewer: Id(Reviewer) {
    read: r -> Paper::Find({reviews > r.id}).world,
    write: none,
  },
}

Paper {
  create: none,
  delete: none,

  world: Id(World) {
    read: none,
    write: none,
  },

  title: String {
    # Should be anyone but conflicts but we don't have blacklists
    read: public,
    # Should also be anyone but conflicts but this is super weird cuz it means non-authors could change the title
    # Still, that's the policy that the Lifty case studies puts down
    write: public,
  },

  authors: Set(Id(User)) {
    read: p -> p.authors,
    write: p -> p.authors,
  },

  conflicts: Set(Id(User)) {
     # - p.conflicts UNSUPPORTED BLACKLIST
    read: p -> User::Find({world: p.world}).map(u -> u.id),
    # In the Lifty version, this is anyone not in the blacklist, which is way too permissive, but eh
    write: public,
  },

  # 0 = NoDecision
  # 1 = Accepted
  # 2 = Rejected
  status: I64 {
    read: p -> [World::ById(p.world).chair] +
                  (if World::ById(p.world).phase == 2
                   then p.authors
                   else []),
    write: none,
  },

  session: String {
    read: public,
    write: none,
  },

  reviews: Set(Id(Review)) {
    # Both of these should blacklist the conflicts
    read: public,
    write: public,
  },
}

World {
  create: none,
  delete: none,

  chair: Id(User) {
    read: public,
    write: none,
  },

  pc: Set(Id(User))  {
    read: public,
    write: none,
  },

  # 0 = Submission
  # 1 = Review
  # 2 = Done
  phase: I64 {
    read: public,
    write: none,
  },
}

@principle
User {
  create: public,
  delete: none,

  world: Id(World) {
    read: none,
    write: none,
  },

  name: String {
    read: u -> [u.id, World::ById(u.world).chair],
    write: u -> [u.id, World::ById(u.world).chair],
  },

  affiliation: String {
    read: u -> [u.id, World::ById(u.world).chair],
    write: u -> [u.id, World::ById(u.world).chair],
  },

  acm_number: String {
    read: u -> [u.id, World::ById(u.world).chair],
    write: u -> [u.id, World::ById(u.world).chair],
  },

  email: String {
    read: u -> [u.id, World::ById(u.world).chair],
    write: u -> [u.id, World::ById(u.world).chair],
  },

  password: String {
    read: u -> [u.id],
    write: u -> [u.id],
  },
}
