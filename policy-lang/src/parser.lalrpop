use crate::ast::*;
use std::str::FromStr;
grammar;

pub GlobalPolicy: GlobalPolicy = {
    <cp:CollectionPolicy*> => GlobalPolicy { collections: cp}
}

CollectionPolicy: CollectionPolicy = {
    <i:Ident> "{" "create" ":" <cp:Policy> "," "delete" ":" <dp:Policy> "," <fp:FieldPolicy*> "}"  => CollectionPolicy {
        name: i,
        create: cp,
        delete: dp,
        fields: fp.into_iter().collect()
    }
}

FieldPolicy: (String, FieldPolicy) = {
    <i:Ident> ":" <t: FieldType> "{" "read" ":" <r:Policy> "," "write" ":" <w:Policy> "," "}" "," =>
        (i.to_string(), FieldPolicy {
            ty: t,
            read: r,
            write: w
        })
}

FieldType: FieldType = {
    "String" => FieldType::String,
    "I32" => FieldType::I32,
    "I64" => FieldType::I64,
    "F64" => FieldType::F64,
    "Id" "(" <coll:Ident> ")" => FieldType::Id(coll),
}

Policy: Policy = {
    "public" => Policy::Public,
    "none" => Policy::None,
    Func => Policy::Func(<>)
}

Func: Func = {
    <i:Ident> "->" <e:QueryExpr> => Func {
        param: i,
        expr: e
    }
}

QueryExpr: Box<QueryExpr> = {
    <l: QueryExpr> "+" <r: QueryExpr2> => Box::new(QueryExpr::Or(l, r)),
    QueryExpr2
}

QueryExpr2: Box<QueryExpr> = {
    Path => Box::new(QueryExpr::Path(<>)),
    <i:r"[0-9]+"> => Box::new(QueryExpr::IntConst(i64::from_str(i).unwrap())),
    <f:r"[0-9]+\.[0-9]+"> => Box::new(QueryExpr::FloatConst(f64::from_str(f).unwrap())),
    <s:r#"".*""#> => Box::new(QueryExpr::StringConst(s.to_string())),
}

Ident: String = {
    <s:r"[a-zA-Z]\w*"> => s.to_string()
}

Path: Vec<String> = {
    <v:(<Ident> ".")*> <i:Ident?> => match i {
        None => v,
        Some(i) => {
            let mut v = v;
            v.push(i);
            v
        }
    }
}

// Migration Lang stuff

pub Migration: Migration = {
    <cp:MigrationCommand*> => Migration(cp)
}

MigrationCommand: MigrationCommand = {
    <t:Ident> "::" "RemoveField" "(" <c:Ident> ")" =>
        MigrationCommand{table: t, action: MigrationAction::RemoveField{field: c}},
    <t:Ident> "::" "AddField" "(" <c:Ident> "," <ty:FieldType> "," <vf:Func> ")" =>
        MigrationCommand{table: t, action: MigrationAction::AddField{field:c, ty: ty, init: vf}},
}
