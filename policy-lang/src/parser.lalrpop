use crate::ast::*;
use std::str::FromStr;
grammar;

pub GlobalPolicy: GlobalPolicy = {
    <sp:StaticPrinciple*> <cp:CollectionPolicy*> => GlobalPolicy { static_principles: sp, collections: cp}
}

StaticPrinciple: StaticPrinciple = {
    "@static-principle" <i:Ident> => StaticPrinciple{name: i}
}

CollectionPolicy: CollectionPolicy = {
    <a:Annotation> <cp: CollectionPolicy> => {
        let mut cp = cp;
        cp.annotations.push(a);
        cp
    },
    <i:Ident> "{" "create" ":" <cp:Policy> "," "delete" ":" <dp:Policy> "," <fp:FieldPolicy*> "}"  => CollectionPolicy {
        name: i,
        create: cp,
        delete: dp,
        fields: fp.into_iter().collect(),
        annotations: vec![],
    }
}

Annotation: Annotation = {
    "@principle" => Annotation::Principle,
}

FieldPolicy: (String, FieldPolicy) = {
    <i:Ident> ":" <t: FieldType> "{" "read" ":" <r:Policy> "," "write" ":" <w:Policy> "," "}" "," =>
        (i.to_string(), FieldPolicy {
            ty: t,
            read: r,
            write: w
        })
}


FieldType: FieldType = {
    "String" => FieldType::String,
    "I64" => FieldType::I64,
    "F64" => FieldType::F64,
    "Bool" => FieldType::Bool,
    "Id" "(" <coll:Ident> ")" => FieldType::Id(coll),
    "DateTime" => FieldType::DateTime,
    "Set" "(" <ft:FieldType> ")" => FieldType::Set(Box::new(ft)),
    "Option" "(" <ft:FieldType> ")" => FieldType::Option(Box::new(ft)),
}

Policy: Policy = {
    "public" => Policy::Public,
    "none" => Policy::None,
    Func => Policy::Func(<>)
}

pub Func: Func = {
    <i:Ident> "->" <e:QueryExpr> => Func {
        param: i,
        expr: e
    }
}

FieldInitializer: (String, Box<QueryExpr>) = {
    <i:Ident> ":" <q:QueryExpr> => (i, q)
}
FieldPredicate: (FieldComparison, String, Box<QueryExpr>) = {
    <i:Ident> ":" <q:QueryExpr> => (FieldComparison::Equals, i, q),
    <i:Ident> ">" <q:QueryExpr> => (FieldComparison::Greater, i, q),
    <i:Ident> ">=" <q:QueryExpr> => (FieldComparison::GreaterOrEquals, i, q),
    <i:Ident> "<" <q:QueryExpr> => (FieldComparison::Less, i, q),
    <i:Ident> "<=" <q:QueryExpr> => (FieldComparison::LessOrEquals, i, q),
}
Object: ObjectLiteral = {
    <i:Ident> "{" <fs:Comma<FieldInitializer>> "}" => ObjectLiteral{ coll: i, fields: fs, template_obj: None},
    <i:Ident> "{" <fs:Comma<FieldInitializer>> "..." <e:QueryExpr> "}" => ObjectLiteral {coll: i, fields: fs, template_obj: Some(e)}
}
Set: Vec<Box<QueryExpr>> = {
    "[" <exprs:Comma<QueryExpr>> "]" => exprs
}
ConditionalExpr: Box<QueryExpr> = {
    "(" "if" <cond:QueryExpr> "then" <e1:QueryExpr> "else" <e2:QueryExpr> ")" => Box::new(QueryExpr::If(cond, e1, e2)),
    "(" "match" <optional:QueryExpr> "as" <i:Ident> "in" <e_some:QueryExpr> "else" <e_none:QueryExpr> ")"
    => Box::new(QueryExpr::Match(optional, i, e_some, e_none)),
}
Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

CollectionExpr: Box<QueryExpr> = {
    <col: Ident> "::" "ById" "(" <idexpr: QueryExpr> ")" =>
    Box::new(QueryExpr::LookupById(col, idexpr)),
    <col: Ident> "::" "Find" "(" "{" <fs:Comma<FieldPredicate>> "}" ")" =>
    Box::new(QueryExpr::Find(col, fs))
}

QueryExpr: Box<QueryExpr> = {
    <l: QueryExpr> "+" <r: QueryExpr2> => Box::new(QueryExpr::Plus(l, r)),
    <l: QueryExpr> "-" <r: QueryExpr2> => Box::new(QueryExpr::Minus(l, r)),
    <l: QueryExpr> "==" <r: QueryExpr2> => Box::new(QueryExpr::IsEq(l, r)),
    <l: QueryExpr> "!=" <r: QueryExpr2> => Box::new(QueryExpr::IsNeq(l, r)),
    <l: QueryExpr> "<" <r: QueryExpr2> => Box::new(QueryExpr::IsLess(l, r)),
    <l: QueryExpr> "<=" <r: QueryExpr2> => Box::new(QueryExpr::IsLessOrEq(l, r)),
    <l: QueryExpr> ">" <r: QueryExpr2> => Box::new(QueryExpr::IsGreater(l, r)),
    <l: QueryExpr> ">=" <r: QueryExpr2> => Box::new(QueryExpr::IsGreaterOrEq(l, r)),
    "!" <e: QueryExpr2> => Box::new(QueryExpr::Not(e)),
    QueryExpr2
}

DateTime: Box<QueryExpr> = {
    "d" "<" <mo:r"[0-9]+"> "-" <d:r"[0-9]+"> "-" <y:r"[0-9]+"> "-" <h:r"[0-9]+"> ":" <mi:r"[0-9]+"> ":" <s:r"[0-9]+"> ">" => Box::new(QueryExpr::DateTimeConst(u32::from_str(mo).unwrap(),
                                              u32::from_str(d).unwrap(),
                                              u32::from_str(y).unwrap(),
                                              u32::from_str(h).unwrap(),
                                              u32::from_str(mi).unwrap(),
                                              u32::from_str(s).unwrap())),
    "now" "()" => Box::new(QueryExpr::Now),
}

QueryExpr2: Box<QueryExpr> = {
    Var => Box::new(QueryExpr::Var(<>)),
    <s:r#""(?:[^"\\]|\\.)*""#> => Box::new(QueryExpr::StringConst(
        s.get(1..s.len()-1).unwrap().to_string())),
    <i:r"[0-9]+"> => Box::new(QueryExpr::IntConst(i64::from_str(i).unwrap())),
    <f:r"[0-9]+\.[0-9]+"> => Box::new(QueryExpr::FloatConst(f64::from_str(f).unwrap())),
    DateTime => <>,
    "true" => Box::new(QueryExpr::BoolConst(true)),
    "false" => Box::new(QueryExpr::BoolConst(false)),
    Object => Box::new(QueryExpr::Object(<>)),
    ConditionalExpr => <>,
    CollectionExpr => <>,
    "public" => Box::new(QueryExpr::Public),
    Set => Box::new(QueryExpr::Set(<>)),
    "(" <e:QueryExpr> ")" => e,
    <le: QueryExpr2> "." "map" "(" <f: Func> ")" => Box::new(QueryExpr::Map(le, f)),
    <le: QueryExpr2> "." "flat_map" "(" <f: Func> ")" => Box::new(QueryExpr::FlatMap(le, f)),
    <o: QueryExpr2> "." <f: Ident> => Box::new(QueryExpr::FieldAccess(o, f)),
    "None" => Box::new(QueryExpr::None),
    "Some" "(" <e: QueryExpr> ")" => Box::new(QueryExpr::Some(e)),
}

Ident: String = {
    <s:r"[_a-zA-Z]\w*"> => s.to_string()
}

Var: String = {
     Ident => <>
}

// Migration Lang stuff

pub Migration: Migration = {
    <cp:MigrationCommand*> => Migration(cp)
}

MigrationAction: MigrationAction = {
    "RemoveField" "(" <c:Ident> ")" =>
        MigrationAction::RemoveField{field:c},
    "AddField" "(" <fp: FieldPolicy> <f:Func> ")" =>
        MigrationAction::AddField{field:fp.0, pol:fp.1, init:f},
    "ChangeField" "(" <c:Ident> "," <ty:FieldType> "," <f:Func> ")" =>
        MigrationAction::ChangeField{field:c, new_ty:ty, new_init:f},
    "RenameField" "(" <f_old:Ident> "," <f_new:Ident> ")" =>
        MigrationAction::RenameField{old_field:f_old, new_field: f_new},

    "LoosenFieldPolicy" "(" <f:Ident> "," <k:FieldPolicyKind> "," <p:Policy>")" =>
        MigrationAction::LoosenFieldPolicy{field:f, kind: k, pol: p},
    "TightenFieldPolicy" "(" <f:Ident> "," <k:FieldPolicyKind> "," <p:Policy>")" =>
        MigrationAction::TightenFieldPolicy{field:f, kind: k, pol: p},
    "LoosenCollectionPolicy" "(" <k:CollectionPolicyKind> "," <p:Policy> ")" =>
        MigrationAction::LoosenCollectionPolicy{kind: k, pol: p},
    "TightenCollectionPolicy" "(" <k:CollectionPolicyKind> "," <p:Policy> ")" =>
        MigrationAction::TightenCollectionPolicy{kind: k, pol: p},
}

MigrationCommand: MigrationCommand = {
    <c:Ident> "::" <action: MigrationAction> =>
        MigrationCommand::CollAction{table: c, action },

    "CreateCollection" "(" <c:CollectionPolicy> ")" =>
        MigrationCommand::Create{ collection: c },
    "DeleteCollection" "(" <i:Ident> ")" =>
        MigrationCommand::Delete{table_name: i},

    ObjectCommand => MigrationCommand::ObjectCommand(<>),

    "AddStaticPrinciple" "(" <sp:Ident> ")" =>
        MigrationCommand::AddStaticPrinciple{name: sp},
    "AddPrinciple" "(" <p:Ident> ")" =>
        MigrationCommand::AddPrinciple{table_name: p},
}

ObjectCommand: ObjectCommand = {
    <c:Ident> "::" "ForEach" "(" <p:Ident> "->" <oc:ObjectCommand> ")" =>
        ObjectCommand::ForEach{collection: c, param:p, body: Box::new(oc)},
    <c:Ident> "::" "Create" "(" <e:QueryExpr> ")" =>
        ObjectCommand::CreateObject{collection:c, value:e},
    <c:Ident> "::" "Delete" "(" <e:QueryExpr> ")" =>
        ObjectCommand::DeleteObject{collection:c, id_expr:e},
}

FieldPolicyKind: FieldPolicyKind = {
    "read" => FieldPolicyKind::Read,
    "write" => FieldPolicyKind::Edit,
}

CollectionPolicyKind: CollectionPolicyKind = {
    "create" => CollectionPolicyKind::Create,
    "delete" => CollectionPolicyKind::Delete,
}
