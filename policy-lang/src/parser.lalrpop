use crate::ast::*;
grammar;

pub GlobalPolicy: GlobalPolicy<String> = {
    <cp:CollectionPolicy*> => GlobalPolicy { collections: cp}
}

CollectionPolicy: CollectionPolicy<String> = {
    <i:Ident> "{" <fp:FieldPolicy*> "}"  => CollectionPolicy {
        name: i,
        fields: fp.into_iter().collect()
    }
}

FieldPolicy: (String, FieldPolicy<String>) = {
    <i:Ident> ":" <t: FieldType> "{" "read" ":" <r:Policy> "write" ":" <w:Policy> "}" =>
        (i.to_string(), FieldPolicy {
            ty: t,
            read: r,
            write: w
        })
}

FieldType: FieldType = {
    "String" => FieldType::String,
    "I32" => FieldType::I32,
    "I64" => FieldType::I64,
    "F64" => FieldType::F64,
}

Policy: Policy<String> = {
    "public" => Policy::Public,
    "none" => Policy::None,
    PolicyFunc => Policy::Func(<>)
}

PolicyFunc: PolicyFunc<String> = {
    <i:Ident> "->" <e:QueryExpr> => PolicyFunc {
        param: i,
        expr: e
    }
}

QueryExpr: Box<QueryExpr<String>> = {
    <l: QueryExpr> "+" <r: QueryExpr2> => Box::new(QueryExpr::Or(l, r)),
    QueryExpr2
}

QueryExpr2: Box<QueryExpr<String>> = {
    Path => Box::new(QueryExpr::Path(<>))
}

Ident: String = {
    <s:r"[a-zA-Z]\w*"> => s.to_string()
}

Path: Vec<String> = {
    <v:(<Ident> ".")*> <i:Ident?> => match i {
        None => v,
        Some(i) => {
            let mut v = v;
            v.push(i);
            v
        }
    }
}
