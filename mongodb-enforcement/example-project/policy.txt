@static-principle
Authenticator

@principle
User {
    create: public,
    delete: none,
    username : String {
        read: public,
        write: none,
    },

    pass_hash : String {
        read: r -> [Authenticator],
        write: r -> [r.id],
    },

    num_followers : I64 {
        read: public,
        write: none,
    },
    trustworthyness : I64 {
        read: m -> [m.id],
        write: none,
    },
    flair : String {
        read: m -> MultiMessage::Find({to > m.id}).flat_map(m -> m.to),
        write: m -> [m.id],
    },
}

Message {
    create: m -> [m.from],
    delete: none,
    from : Id(User) {
        read: m -> (if m.is_public then public else [m.from, m.to]),
        write: m -> (if User::ById(m.from).trustworthyness > 10 then [m.from] else []),
    },

    to : Id(User) {
        read: m -> (if m.is_public then public else [m.from, m.to]) ,
        write: none,
    },

    text : String {
        read: m -> (if m.is_public then public else [m.from, m.to]),
        write: none,
    },

    is_public : Bool {
        read: public,
        write: m -> [m.from],
    },
}

MultiMessage {
    create: m -> [m.from],
    delete: none,
    from : Id(User) {
        read: m -> [m.from] + m.to,
        write: none,
    },

    to : Set(Id(User)) {
        read: m -> [m.from] + m.to,
        write: none,
    },

    text : String {
        read: m -> [m.from] + m.to,
        write: none,
    },
}
