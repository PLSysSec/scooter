@principle
User {
    create: u -> User::Find({is_admin: true,}).map(u -> u.id),
    delete: u -> ([u.id] + User::Find({is_admin: true,}).map(u -> u.id)),

    email : String {
        read: u -> [u.id],
        write: u -> [u.id],
    },
    encrypted_password : String {
        read: u -> [u.id],
        write: u -> [u.id],
    },
    reset_password_token : String {
        read: public,
        write: public,
    },
    reset_password_token_sent_at : DateTime {
        read: public,
        write: public,
    },
    invitation_accepted_at : DateTime {
        read: none,
        write: u -> [u.id],
    },
    invitation_accepted : Bool {
        read: public,
        write: u -> [u.id],
    },
    invitation_token : String {
        read: public,
        write: u -> (if !(u.invitation_accepted) then User::Find({is_admin: true,}).map(u -> u.id) else []),
    },
    invitation_created_at : DateTime {
        read: public,
        write: u -> (if !(u.invitation_accepted) then User::Find({is_admin: true,}).map(u -> u.id) else []),
    },
    invitation_sent_at : DateTime {
        read: public,
        write: u -> (if !(u.invitation_accepted) then User::Find({is_admin: true,}).map(u -> u.id) else []),
    },
    invited_by : Id(User) {
        read: u -> [u.id],
        write: u -> (if !(u.invitation_accepted) then User::Find({is_admin: true,}).map(u -> u.id) else []),
    },
    is_admin : Bool {
        read: _ -> User::Find({}).map(u -> u.id),
        write: _ -> User::Find({is_admin: true,}).map(u -> u.id),
    },
}
Person {
    create: _ -> User::Find({}).map(u -> u.id),
    delete: _ -> User::Find({}).map(u -> u.id),

    name : String {
        read: public,
        write: _ -> User::Find({}).map(u -> u.id),
    },
    kind : I64 {
        read: public,
        write: _ -> User::Find({}).map(u -> u.id),
    },
}
ScheduleItem {
    create: _ -> User::Find({}).map(u -> u.id),
    delete: _ -> User::Find({}).map(u -> u.id),

    name : String {
        read: public,
        write: _ -> User::Find({}).map(u -> u.id),
    },
    starts_at : DateTime {
        read: public,
        write: _ -> User::Find({}).map(u -> u.id),
    },
    ends_at : DateTime {
        read: public,
        write: _ -> User::Find({}).map(u -> u.id),
    },
    is_global : Bool {
        read: public,
        write: _ -> User::Find({}).map(u -> u.id),
    },
    location : String {
        read: public,
        write: _ -> User::Find({}).map(u -> u.id),
    },
}
PeopleScheduleItem {
    create: _ -> User::Find({}).map(u -> u.id),
    delete: _ -> User::Find({}).map(u -> u.id),

    person : Id(Person) {
        read: public,
        write: none,
    },
    item : Id(ScheduleItem) {
        read: public,
        write: none,
    },
}


